
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode p = l1, q = l2, curr = dummyHead;
    int carry = 0;
    while (p != null || q != null) {
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        if(curr.next!=null)
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }
    if (carry > 0) {
        curr.next = new ListNode(carry);
    }
    return dummyHead.next;
}


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode l3= new ListNode(0);
        ListNode head=l3;
        int c=0;
        
        while(l1!=null && l2!=null)
        {   
           
            int temp= l1.val+l2.val+c; // Adding with carry
            c=temp/10;
            l3.next=new ListNode(temp%10);
            l3=l3.next;
            //System.out.println("List 3 "+l3.val);
            l1=l1.next;
            l2=l2.next;  
                              
        }
        
        if(c>0) //if carry is remaining
        {
            //System.out.println("c"+c);
            l3.next= new ListNode(c);
            
        }
        
        while(l1!=null || l2!=null)
        {
        if(l1!=null)
        {
           
            l3.next= new ListNode(l3.val);
            l3=l3.next;
        }
        else if(l2!=null)
        {
           
            l3.next= new ListNode(l2.val);
            l3=l3.next;
        }
        else
        {
            l3.next=null;
        }
        }
        
        return head.next;
    }
    
}

*/
